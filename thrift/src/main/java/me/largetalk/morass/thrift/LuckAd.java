/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package me.largetalk.morass.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class LuckAd implements org.apache.thrift.TBase<LuckAd, LuckAd._Fields>, java.io.Serializable, Cloneable, Comparable<LuckAd> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LuckAd");

  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("snippet", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LuckAdStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LuckAdTupleSchemeFactory());
  }

  public String bid; // required
  public String snippet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BID((short)1, "bid"),
    SNIPPET((short)2, "snippet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BID
          return BID;
        case 2: // SNIPPET
          return SNIPPET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("snippet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LuckAd.class, metaDataMap);
  }

  public LuckAd() {
  }

  public LuckAd(
    String bid,
    String snippet)
  {
    this();
    this.bid = bid;
    this.snippet = snippet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LuckAd(LuckAd other) {
    if (other.isSetBid()) {
      this.bid = other.bid;
    }
    if (other.isSetSnippet()) {
      this.snippet = other.snippet;
    }
  }

  public LuckAd deepCopy() {
    return new LuckAd(this);
  }

  @Override
  public void clear() {
    this.bid = null;
    this.snippet = null;
  }

  public String getBid() {
    return this.bid;
  }

  public LuckAd setBid(String bid) {
    this.bid = bid;
    return this;
  }

  public void unsetBid() {
    this.bid = null;
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return this.bid != null;
  }

  public void setBidIsSet(boolean value) {
    if (!value) {
      this.bid = null;
    }
  }

  public String getSnippet() {
    return this.snippet;
  }

  public LuckAd setSnippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  public void unsetSnippet() {
    this.snippet = null;
  }

  /** Returns true if field snippet is set (has been assigned a value) and false otherwise */
  public boolean isSetSnippet() {
    return this.snippet != null;
  }

  public void setSnippetIsSet(boolean value) {
    if (!value) {
      this.snippet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((String)value);
      }
      break;

    case SNIPPET:
      if (value == null) {
        unsetSnippet();
      } else {
        setSnippet((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BID:
      return getBid();

    case SNIPPET:
      return getSnippet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BID:
      return isSetBid();
    case SNIPPET:
      return isSetSnippet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LuckAd)
      return this.equals((LuckAd)that);
    return false;
  }

  public boolean equals(LuckAd that) {
    if (that == null)
      return false;

    boolean this_present_bid = true && this.isSetBid();
    boolean that_present_bid = true && that.isSetBid();
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (!this.bid.equals(that.bid))
        return false;
    }

    boolean this_present_snippet = true && this.isSetSnippet();
    boolean that_present_snippet = true && that.isSetSnippet();
    if (this_present_snippet || that_present_snippet) {
      if (!(this_present_snippet && that_present_snippet))
        return false;
      if (!this.snippet.equals(that.snippet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LuckAd other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnippet()).compareTo(other.isSetSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snippet, other.snippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LuckAd(");
    boolean first = true;

    sb.append("bid:");
    if (this.bid == null) {
      sb.append("null");
    } else {
      sb.append(this.bid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snippet:");
    if (this.snippet == null) {
      sb.append("null");
    } else {
      sb.append(this.snippet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LuckAdStandardSchemeFactory implements SchemeFactory {
    public LuckAdStandardScheme getScheme() {
      return new LuckAdStandardScheme();
    }
  }

  private static class LuckAdStandardScheme extends StandardScheme<LuckAd> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LuckAd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bid = iprot.readString();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snippet = iprot.readString();
              struct.setSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LuckAd struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bid != null) {
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeString(struct.bid);
        oprot.writeFieldEnd();
      }
      if (struct.snippet != null) {
        oprot.writeFieldBegin(SNIPPET_FIELD_DESC);
        oprot.writeString(struct.snippet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LuckAdTupleSchemeFactory implements SchemeFactory {
    public LuckAdTupleScheme getScheme() {
      return new LuckAdTupleScheme();
    }
  }

  private static class LuckAdTupleScheme extends TupleScheme<LuckAd> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LuckAd struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBid()) {
        optionals.set(0);
      }
      if (struct.isSetSnippet()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBid()) {
        oprot.writeString(struct.bid);
      }
      if (struct.isSetSnippet()) {
        oprot.writeString(struct.snippet);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LuckAd struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.bid = iprot.readString();
        struct.setBidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.snippet = iprot.readString();
        struct.setSnippetIsSet(true);
      }
    }
  }

}

